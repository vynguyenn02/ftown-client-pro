// /services/bot.service.ts
"use client";

import { getCookie } from "cookies-next";
import * as signalR from "@microsoft/signalr";

// ƒê·ªïi URL: BotHub ƒë∆∞·ª£c map t·∫°i "/bothub" tr√™n server
const CHAT_HUB_URL = "https://localhost:7009/bothub";

class BotService {
  private hubConnection: signalR.HubConnection | null = null;

  constructor() {
    this.createConnection();
  }

  private createConnection() {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl(CHAT_HUB_URL, {
        skipNegotiation: true,
        transport: signalR.HttpTransportType.WebSockets,
        accessTokenFactory: () => {
          // L·∫•y token t·ª´ cookie n·∫øu c·∫ßn
          const token = getCookie("token");
          console.log("BotService: accessTokenFactory: token =", token);
          return typeof token === "string" ? token : "";
        },
      })
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Information)
      .build();
  }

  // Kh·ªüi ƒë·ªông k·∫øt n·ªëi
  public async startConnection(): Promise<void> {
    if (!this.hubConnection) {
      this.createConnection();
    }
    // N·∫øu k·∫øt n·ªëi kh√¥ng ·ªü tr·∫°ng th√°i Disconnected th√¨ d·ª´ng tr∆∞·ªõc khi start l·∫°i
    if (this.hubConnection!.state !== signalR.HubConnectionState.Disconnected) {
      await this.stopConnection();
    }
    try {
      await this.hubConnection!.start();
      console.log("‚úÖ BotService: SignalR connection established:", this.hubConnection!.state);
    } catch (err) {
      console.error("‚ùå BotService: Error starting connection:", err);
      // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu g·∫∑p l·ªói
      setTimeout(() => this.startConnection(), 5000);
    }
  }

  // D·ª´ng k·∫øt n·ªëi
  public async stopConnection(): Promise<void> {
    if (!this.hubConnection) return;
    if (this.hubConnection.state !== signalR.HubConnectionState.Connected) {
      console.log("‚ÑπÔ∏è BotService: Hub is not connected. Skip stop. State:", this.hubConnection.state);
      return;
    }
    try {
      await this.hubConnection.stop();
      console.log("üîå BotService: Disconnected. State:", this.hubConnection.state);
    } catch (err) {
      console.error("‚ùå BotService: Error disconnecting:", err);
    }
  }

  // Reset k·∫øt n·ªëi: d·ª´ng, t·∫°o m·ªõi v√† kh·ªüi ƒë·ªông l·∫°i
  public async resetConnection(): Promise<void> {
    await this.stopConnection();
    this.createConnection();
    await this.startConnection();
  }

  /**
   * ƒêƒÉng k√Ω s·ª± ki·ªán nh·∫≠n tin nh·∫Øn t·ª´ server.
   * Server g·ª≠i s·ª± ki·ªán "ReceiveMessage" v·ªõi 2 tham s·ªë: sender v√† message.
   */
  public onMessageReceived(callback: (sender: string, content: string) => void): void {
    if (!this.hubConnection) return;
    // H·ªßy ƒëƒÉng k√Ω s·ª± ki·ªán c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    this.hubConnection.off("ReceiveMessage");
    this.hubConnection.on("ReceiveMessage", (sender: string, message: string) => {
      console.log("üì• BotService: Received message from", sender, ":", message);
      callback(sender, message);
    });
  }

  /**
   * G·ª≠i tin nh·∫Øn c·ªßa user l√™n server qua SignalR.
   * G·ªçi method "SendMessage" c·ªßa BotHub:
   *     public async Task SendMessage(int userId, string message)
   */
  public async sendMessageToBot(userId: number, content: string): Promise<void> {
    if (!this.hubConnection || this.hubConnection.state !== signalR.HubConnectionState.Connected) {
      console.warn("‚ö†Ô∏è BotService: Hub is not connected. Cannot send message. State:", this.hubConnection?.state);
      return;
    }
    try {
      console.log(`BotService: Sending message to bot. userId=${userId}, content=${content}`);
      await this.hubConnection.invoke("SendMessage", userId, content);
      console.log("‚úÖ BotService: Message sent successfully.");
    } catch (err) {
      console.error("‚ùå BotService: Error sending message:", err);
    }
  }
}

const botService = new BotService();
export default botService;
